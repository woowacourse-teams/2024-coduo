package site.coduo.pairroom.mock;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import site.coduo.pairroom.domain.PairRoom;
import site.coduo.pairroom.domain.accesscode.AccessCode;
import site.coduo.pairroom.service.port.PairRoomRepository;

public class FakePairRoomRepository implements PairRoomRepository {

    private Long autoGeneratedId = 0L;
    public final List<PairRoom> data = new ArrayList<>();

    @Override
    public PairRoom save(final PairRoom pairRoom) {
        final site.coduo.pairroom.repository.PairRoomEntity entity = site.coduo.pairroom.repository.PairRoomEntity.from(
                pairRoom);
        if (entity.getId() == null || entity.getId() == 0) {
            final site.coduo.pairroom.repository.PairRoomEntity createdPairRoomEntity = site.coduo.pairroom.repository.PairRoomEntity.builder()
                    .id(++autoGeneratedId)
                    .status(pairRoom.getStatus())
                    .navigator(pairRoom.getPair().getFirstPairName())
                    .driver(pairRoom.getPair().getSecondPairName())
                    .accessCode(pairRoom.getAccessCodeText())
                    .build();
            data.add(createdPairRoomEntity.toDomain());
            return createdPairRoomEntity.toDomain();
        } else {
            data.removeIf(item -> Objects.equals(entity.getId(), site.coduo.pairroom.repository.PairRoomEntity.from(
                    pairRoom).getId()));
            data.add(pairRoom);
            return pairRoom;
        }
    }

    @Override
    public Optional<PairRoom> findByAccessCode(final AccessCode accessCode) {
        return data.stream()
                .filter(pairRoom -> pairRoom.getAccessCode().equals(accessCode)).findAny();
    }
}

name: Coduo Backend Test Server CD

on:
  push:
    branches: [ "BE/test" ]

jobs:
  build:
    environment: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-write-only: true

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_ID }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Image build and push
        run: |
          docker build --build-arg PROFILE=test --build-arg DEPENDENCY=build/dependency -t ${{ secrets.DOCKER_REPO_NAME }}/springboot-app:test-latest --platform linux/arm64 .
          docker push ${{ secrets.DOCKER_REPO_NAME }}/springboot-app:test-latest

      - name: Upload docker-compose yaml script to artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: ${{ github.workspace }}/backend/be_app-docker-compose.yml

  deploy:
    environment: test
    runs-on: test-ec2-runner
    needs: build
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Set docker-compose YAML script to runner
        uses: actions/download-artifact@v4
        with:
          name: docker-compose
          path: ${{ github.workspace }}/backend

      - name: Move docker-compose YAML
        run: |
          sudo mv be_app-docker-compose.yml ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/

      - name: Extract secrets as .be_app-env file
        run: |
          cat <<EOF > ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/.be_app-env

          # Docker Hub info from Github Secrets
          DOCKER_REPO_NAME=${{ secrets.DOCKER_REPO_NAME }}

          # DB Configuration secrets info from Github Secrets
          MASTER_DB_URL=${{ secrets.TEST_SERVER_DB_URL }}
          MASTER_DB_USERNAME=${{ secrets.TEST_SERVER_DB_USERNAME }}
          MASTER_DB_PASSWORD=${{ secrets.TEST_SERVER_DB_PASSWORD }}
          
          SLAVE_DB_URL=${{ secrets.TEST_SERVER_DB_URL }}
          SLAVE_DB_USERNAME=${{ secrets.TEST_SERVER_DB_USERNAME }}
          SLAVE_DB_PASSWORD=${{ secrets.TEST_SERVER_DB_PASSWORD }}
          DDL_AUTO=${{ secrets.DDL_AUTO }}

          # OAUTH & JWT
          CLIENT_ID=${{ secrets.TEST_CLIENT_ID }}
          CLIENT_SECRET=${{ secrets.TEST_CLIENT_SECRET }}
          CLIENT_REDIRECT_URI=${{ secrets.TEST_CLIENT_REDIRECT_URI }}
          JWT_KEY=${{ secrets.JWT_KEY}}
          
          # Sticky Synchronize
          INSTANCE_NAME=${{ secrets.INSTANCE_A_NAME }}
          
          # Server App
          SERVER_BINDING_PORT=${{ secrets.SERVER_BINDING_PORT }}
          SERVER_LOGS_PATH=${{ secrets.SERVER_LOGS_PATH }}
          EOF

      - name: Stop and remove existing containers
        run: |
          sudo docker-compose --env-file ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/.be_app-env -f ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/be_app-docker-compose.yml down --rmi all
      - name: Deploy docker container
        run: |
          sudo docker-compose --env-file ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/.be_app-env -f ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/be_app-docker-compose.yml up -d

      # 실행중인 서버 확인
      - name: Determine Active and Inactive Ports (Blue/Green)
        id: determine-ports
        run: |
          ip=${{ secrets.TEST_SERVER_IP_ADDRESS }}
          ports=(8080 8081)
          for port in "${ports[@]}"; do
            RESPONSE=$(curl -s https://$ip:$port/api/actuator/health)
            IS_ACTIVE=$(echo ${RESPONSE} | grep 'UP' | wc -l)
            if [ $IS_ACTIVE -eq 1 -a $port -eq "8080" ]; then
              echo "BLUE_PORT=8080" >> $GITHUB_ENV
              echo "GREEN_PORT=8081" >> $GITHUB_ENV
            elif [ $IS_ACTIVE -eq 1 -a $port -eq "8081" ]; then
              echo "BLUE_PORT=8081" >> $GITHUB_ENV
              echo "GREEN_PORT=8080" >> $GITHUB_ENV
            fi
          done

      - name: Start the new (green/blue) environment
        run: |
          sudo docker-compose --env-file ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/.be_app-env -f ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/be_app-docker-compose.yml -p ${{ env.GREEN_PORT }} up -d

      - name: Wait for new environment to be healthy
        run: |
          until sudo docker inspect --format '{{json .State.Health.Status}}' ${env.GREEN_PORT}_springboot-app | grep "healthy"; do sleep 5; done

      - name: Switch traffic to new environment
        run: |
          sudo docker-compose --env-file ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/.be_app-env -f ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/be_app-docker-compose.yml -p ${{ env.GREEN_PORT }} up -d --scale springboot-app=1

      - name: Stop and remove the old environment
        run: |
          sudo docker-compose --env-file ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/.be_app-env -f ${{ secrets.DOCKER_COMPOSE_YAML_PATH }}/be_app-docker-compose.yml -p ${{ env.BLUE_PORT }} down
